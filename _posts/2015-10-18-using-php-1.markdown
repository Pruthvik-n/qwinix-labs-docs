---
layout: topics
title:  "Dockerizing a simple PHP page part-1"
date:   2015-09-17 12:53:34
categories: docker part-2
---

Before proceeding further you are expected to know the basics of docker

**[Jump To Docker Basics][docker-basics]**

A simple PHP page can be dockerized in three simple steps:

1. Create a Dockerfile.
2. Build an image of the container from the Dockerfile.
3. Run the image and spin up a container.

**Prerequesites**

To begin with lets first create a simple PHP page

{% highlight php %}
<?php
  echo "Hello World";
?>
{% endhighlight %}


Save the file as **index.php**

Now, lets create a config file of apache

	<VirtualHost *:80>
	  ServerAdmin me@mydomain.com
	  DocumentRoot /var/www/html

	  <Directory /var/www/html/>
	      Options Indexes FollowSymLinks MultiViews
	      AllowOverride All
	      Order deny,allow
	      Allow from all
	  </Directory>

	  ErrorLog ${APACHE_LOG_DIR}/error.log
	  CustomLog ${APACHE_LOG_DIR}/access.log combined

	</VirtualHost>

Save the config file as **apache-config.conf** and save it in the same directory as the PHP file.

Now lets begin with the dockerizing.

The **step 1** would be to create a Dockefile.

{% highlight ruby %}
# Pull an ubuntu 14.04v image
FROM ubuntu:14.04

# Install apache, PHP, and supplimentary programs. curl and lynx-cur are for debugging the container.
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install apache2 libapache2-mod-php5 php5-mysql php5-gd php-pear php-apc php5-curl curl lynx-cur

# Enable apache mods.
RUN a2enmod php5
RUN a2enmod rewrite

# Update the PHP.ini file, enable <? ?> tags and quieten logging.
RUN sed -i "s/short_open_tag = Off/short_open_tag = On/" /etc/php5/apache2/php.ini
RUN sed -i "s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/" /etc/php5/apache2/php.ini

# Manually set up the apache environment variables
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid

# Expose a port to be mapped to
EXPOSE 80

# Point the container's document root to your present working directory on your local machine
ADD $PWD /var/www/html

# Update the default apache site with the config we created.
ADD apache-config.conf /etc/apache2/sites-enabled/000-default.conf

# By default, simply start apache.
CMD /usr/sbin/apache2ctl -D FOREGROUND

{% endhighlight %}

Save the file as 'Dockerfile' in the same directory as the other two files. And lets go through the Dockerfile line wise.

{% highlight ruby %}

# Pull an ubuntu 14.04v image
FROM ubuntu:14.04

{% endhighlight %}

This is pretty straight forward. Dockerfile tells docker to pull out an image of ubuntu 14.04.

The next set of lines :
{% highlight ruby%}

# Install apache, PHP, and supplimentary programs. curl and lynx-cur are for debugging the container.
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install apache2 libapache2-mod-php5 php5-mysql php5-gd php-pear php-apc php5-curl curl lynx-cur

# Enable apache mods.
RUN a2enmod php5
RUN a2enmod rewrite

# Update the PHP.ini file, enable <? ?> tags and quieten logging.
RUN sed -i "s/short_open_tag = Off/short_open_tag = On/" /etc/php5/apache2/php.ini
RUN sed -i "s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/" /etc/php5/apache2/php.ini

# Manually set up the apache environment variables
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid

{% endhighlight %}

Here the **RUN** keyword runs the command which have been specified on the ubuntu image.

1. We are installing the following lib files onto the ubuntu image with the **RUN** command
  * Apache
  * PHP
  * cURL
  * MySQL connection libraries
2. We enable the REWRITE and PHP modules on apache
3. Set a few things to enable viewing logs and debugging
4. And set up the necessary environment variables of apache

{% highlight ruby %}
# Expose a port to be mapped to
EXPOSE 80

# Point the container's document root to your present working directory on your local machine
ADD $PWD /var/www/html

# Update the default apache site with the config we created.
ADD apache-config.conf /etc/apache2/sites-enabled/000-default.conf

# By default, simply start apache.
CMD /usr/sbin/apache2ctl -D FOREGROUND
{% endhighlight %}

The above line tells the image to expose the port 80 on the ubuntu image and start the apache service with the configurations mentioned earlier.

**[Jump To Next Step][part-2]**

Check out the [Jekyll docs][jekyll] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll’s dedicated Help repository][jekyll-help].

[docker-basics]: ../../../../docker-basics.html
[part-2]:        using-php-2.html
[jekyll]:        http://jekyllrb.com
[jekyll-gh]:     https://github.com/jekyll/jekyll
[jekyll-help]:   https://github.com/jekyll/jekyll-help
